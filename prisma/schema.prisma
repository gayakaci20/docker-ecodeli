// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  output        = "../node_modules/.prisma/client"
  binaryTargets = ["native", "rhel-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  // // relationMode = "prisma"
}

enum Role {
  SENDER
  CARRIER
  CUSTOMER
  MERCHANT
  SERVICE_PROVIDER
  ADMIN
}

enum UserType {
  INDIVIDUAL
  PROFESSIONAL
}

enum PackageStatus {
  PENDING
  MATCHED
  IN_TRANSIT
  DELIVERED
  CANCELLED
}

enum RideStatus {
  AVAILABLE
  FULL
  COMPLETED
  CANCELLED
}

enum MatchStatus {
  PROPOSED
  ACCEPTED_BY_SENDER
  ACCEPTED_BY_CARRIER
  CONFIRMED // Both accepted
  REJECTED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum NotificationType {
  MATCH_PROPOSED
  MATCH_ACCEPTED
  MATCH_REJECTED
  MATCH_CONFIRMED
  PACKAGE_IN_TRANSIT
  PACKAGE_DELIVERED
  RIDE_REMINDER
  NEW_MESSAGE
  PAYMENT_SUCCESS
  PAYMENT_FAILED
  ACCOUNT_VERIFIED
  PASSWORD_RESET
}

model User {
  id            String    @id @default(cuid()) // Using CUID for IDs
  email         String    @unique
  password      String?   // Password for credentials login, can be null if using OAuth
  name          String? @db.Text
  firstName     String?   @map("first_name")
  lastName      String?   @map("last_name")
  image         String?   // For profile picture
  phoneNumber   String?   @unique @map("phone_number")
  address       String? @db.Text
  role          Role      @default(SENDER)
  userType      UserType  @default(INDIVIDUAL) @map("user_type")
  // Champs pour les professionnels
  companyName   String?   @map("company_name")
  companyFirstName String? @map("company_first_name")
  companyLastName String?  @map("company_last_name")
  isVerified    Boolean   @default(false) @map("is_verified")
  emailVerified DateTime? @map("email_verified") // For NextAuth Adapter
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  accounts Account[] // For NextAuth OAuth
  sessions Session[] // For NextAuth DB Sessions

  packages      Package[]
  rides         Ride[]
  sentMessages  Message[] @relation("SenderMessages")
  receivedMessages Message[] @relation("ReceiverMessages")
  payments      Payment[]
  notifications Notification[]
  
  // New business relations
  services      Service[]
  providedBookings Booking[] @relation("ServiceProvider")
  customerBookings Booking[] @relation("Customer")
  contracts     Contract[]
  documents     Document[]
  boxRentals    BoxRental[]

  @@map("users")
}

// For NextAuth.js Adapter - OAuth accounts
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? 
  access_token      String? 
  expires_at        Int?
  token_type        String? @db.Text
  scope             String? @db.Text
  id_token          String? 
  session_state     String? @db.Text

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// For NextAuth.js Adapter - Database Sessions
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// For NextAuth.js Adapter - Email Verification Tokens
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Package {
  id              String        @id @default(cuid())
  userId          String        @map("user_id")
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  title           String
  description     String? @db.Text
  weight          Float?        // in kg
  dimensions      String?       // e.g., "30x20x10" (LxWxH cm)
  price           Float?        // Prix de transport en euros
  sizeLabel       String?       @map("size_label") // S, M, L, XL, XXL, XXXL
  pickupAddress   String        @map("pickup_address")
  deliveryAddress String        @map("delivery_address")
  pickupLat       Float?        @map("pickup_lat")
  pickupLng       Float?        @map("pickup_lng")
  deliveryLat     Float?        @map("delivery_lat")
  deliveryLng     Float?        @map("delivery_lng")
  pickupDate      DateTime?     @map("pickup_date")
  deliveryDate    DateTime?     @map("delivery_date")
  imageUrl        String?       @map("image_url")
  status          PackageStatus @default(PENDING)
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  matches         Match[]

  @@map("packages")
}

model Ride {
  id              String     @id @default(cuid())
  userId          String     @map("user_id")
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  startLocation   String     @map("start_location_address")
  endLocation     String     @map("end_location_address")
  startLat        Float      @map("start_lat")
  startLng        Float      @map("start_lng")
  endLat          Float      @map("end_lat")
  endLng          Float      @map("end_lng")
  departureTime   DateTime   @map("departure_time")
  estimatedArrivalTime DateTime? @map("estimated_arrival_time")
  vehicleType     String? @db.Text
  availableSeats  Int?       @map("available_seats") // For passengers or parcel count
  maxPackageWeight Float?    @map("max_package_weight") // in kg
  maxPackageSize  String?    @map("max_package_size") // e.g., "MEDIUM"
  pricePerKg      Float?     @map("price_per_kg")
  pricePerSeat    Float?     @map("price_per_seat")
  notes           String? @db.Text
  status          RideStatus @default(AVAILABLE)
  createdAt       DateTime   @default(now()) @map("created_at")
  updatedAt       DateTime   @updatedAt @map("updated_at")

  matches         Match[]

  @@map("rides")
}

model Match {
  id        String      @id @default(cuid())
  packageId String      @map("package_id")
  package   Package     @relation(fields: [packageId], references: [id], onDelete: Cascade)
  rideId    String      @map("ride_id")
  ride      Ride        @relation(fields: [rideId], references: [id], onDelete: Cascade)
  status    MatchStatus @default(PROPOSED)
  proposedByUserId String? @map("proposed_by_user_id") // ID of user (sender or carrier) who proposed
  price     Float?      // Agreed price for this match
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")

  payment   Payment?    // A match can have one payment

  @@unique([packageId, rideId]) // A package can only be matched to a ride once
  @@map("matches")
}

model Message {
  id          String   @id @default(cuid())
  senderId    String   @map("sender_id")
  sender      User     @relation("SenderMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiverId  String   @map("receiver_id")
  receiver    User     @relation("ReceiverMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  matchId     String?  @map("match_id") // Optional: associate message with a match
  // match    Match?   @relation(fields: [matchId], references: [id], onDelete: SetNull) -> If you add this, create a relation in Match model too
  content     String   
  read        Boolean  @default(false)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("messages")
}

model Payment {
  id            String        @id @default(cuid())
  userId        String        @map("user_id") // The user making or receiving the payment (context dependent)
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  matchId       String        @unique @map("match_id") // Each payment is tied to one match
  match         Match         @relation(fields: [matchId], references: [id])
  amount        Float         // Amount in a standard currency unit
  currency      String        @default("EUR") // Or your default currency
  status        PaymentStatus @default(PENDING)
  paymentMethod String?       @map("payment_method") // e.g., "stripe", "paypal", "card"
  transactionId String?       @unique @map("transaction_id") // From payment provider
  paymentIntentId String?    @unique @map("payment_intent_id") // e.g. Stripe Payment Intent ID
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  @@map("payments")
}

model Notification {
  id        String    @id @default(cuid())
  userId    String    @map("user_id")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      NotificationType
  message   String
  relatedEntityId String? @map("related_entity_id") // e.g., packageId, rideId, matchId
  read      Boolean   @default(false)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@map("notifications")
}

// ===== NEW BUSINESS MODELS =====

enum ServiceCategory {
  CLEANING
  MAINTENANCE
  DELIVERY
  PERSONAL_CARE
  TUTORING
  CONSULTING
  OTHER
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  REFUNDED
}

enum ContractStatus {
  DRAFT
  PENDING
  SIGNED
  EXPIRED
  TERMINATED
}

enum DocumentType {
  INVOICE
  CONTRACT
  RECEIPT
  DELIVERY_NOTE
  CERTIFICATE
  OTHER
}

model Service {
  id          String          @id @default(cuid())
  providerId  String          @map("provider_id")
  provider    User            @relation(fields: [providerId], references: [id], onDelete: Cascade)
  name        String
  description String?         
  category    ServiceCategory @default(OTHER)
  price       Float           // Base price
  duration    Int?            // Duration in minutes
  isActive    Boolean         @default(true) @map("is_active")
  location    String?         // Service location or "Remote"
  requirements String?         // Special requirements
  averageRating Float?        @default(0) @map("average_rating") // Average rating from bookings
  reviewCount Int            @default(0) @map("review_count") // Number of reviews
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")

  bookings    Booking[]

  @@map("services")
}

model Booking {
  id          String        @id @default(cuid())
  serviceId   String        @map("service_id")
  service     Service       @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  customerId  String        @map("customer_id")
  customer    User          @relation("Customer", fields: [customerId], references: [id], onDelete: Cascade)
  providerId  String        @map("provider_id")
  provider    User          @relation("ServiceProvider", fields: [providerId], references: [id], onDelete: Cascade)
  scheduledAt DateTime      @map("scheduled_at")
  duration    Int?          // Duration in minutes
  totalAmount Float         @map("total_amount")
  status      BookingStatus @default(PENDING)
  notes       String?       
  address     String?       // Where the service will be performed
  rating      Int?          // 1-5 stars
  review      String?       
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")

  @@map("bookings")
}

model Contract {
  id         String         @id @default(cuid())
  merchantId String         @map("merchant_id")
  merchant   User           @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  title      String
  content    String         
  terms      String?        
  status     ContractStatus @default(DRAFT)
  signedAt   DateTime?      @map("signed_at")
  expiresAt  DateTime?      @map("expires_at")
  value      Float?         // Contract value
  currency   String         @default("EUR")
  createdAt  DateTime       @default(now()) @map("created_at")
  updatedAt  DateTime       @updatedAt @map("updated_at")

  @@map("contracts")
}

model Document {
  id          String       @id @default(cuid())
  userId      String       @map("user_id")
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        DocumentType @default(OTHER)
  title       String
  description String?      
  fileName    String       @map("file_name")
  filePath    String       @map("file_path")
  fileSize    Int?         @map("file_size") // Size in bytes
  mimeType    String?      @map("mime_type")
  relatedEntityId String?  @map("related_entity_id") // Link to booking, contract, etc.
  relatedEntityType String? @map("related_entity_type") // "booking", "contract", etc.
  isPublic    Boolean      @default(false) @map("is_public")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")

  @@map("documents")
}

// Storage Box System for temporary storage
model StorageBox {
  id          String   @id @default(cuid())
  code        String   @unique // Unique box identifier
  location    String   // Physical location
  size        String   // SMALL, MEDIUM, LARGE
  isOccupied  Boolean  @default(false) @map("is_occupied")
  isActive    Boolean  @default(true) @map("is_active")
  pricePerDay Float    @map("price_per_day")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  rentals     BoxRental[]

  @@map("storage_boxes")
}

model BoxRental {
  id        String    @id @default(cuid())
  boxId     String    @map("box_id")
  box       StorageBox @relation(fields: [boxId], references: [id], onDelete: Cascade)
  userId    String    @map("user_id")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  startDate DateTime  @map("start_date")
  endDate   DateTime? @map("end_date")
  totalCost Float?    @map("total_cost")
  accessCode String?  @map("access_code") // Temporary access code
  isActive  Boolean   @default(true) @map("is_active")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@map("box_rentals")
}
